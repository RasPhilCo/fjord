#!/usr/bin/env bash

XDG_CACHE_HOME=${XDG_DATA_HOME:="$(cd && pwd)/Library/Caches"}

random_8_alphanumeric () {
  echo "$(hexdump -n 4 -v -e '/1 "%02X"' /dev/urandom)"
}

start_runner () {
  local cmd=$1
  local deps="${@:2}"
  local app_dir=`pwd`
  local languages
  local port

  local nodejs_build_script="
  NPM_CONFIG_PRODUCTION=false NODE_ENV=development /fjord/lib/compile nodejs;
  echo \"export NPM_CONFIG_PRODUCTION=false;export NODE_ENV=development;\" >> /root/.profile.d/nodejs.sh;
  source /root/.profile.d/nodejs.sh;
  "

  local python_build_script="
  /fjord/lib/compile python;
  source /root/.profile.d/python.sh;
  source /root/.profile.d/python.gunicorn.sh;
  "

  local ruby_build_script="
  /fjord/lib/compile ruby;
  source /root/.profile.d/ruby.sh;
  "

  local combined_language_script

  if [ -f "./requirements.txt" ] || [ -f "./Pipfile" ]; then
    echo "build: python app"
    combined_language_script="$combined_language_script $python_build_script"
  fi
  if [ -f "./Gemfile" ]; then
    echo "build: ruby app"
    combined_language_script="$combined_language_script $ruby_build_script"
  fi
  if [ -f "package.json" ]; then
    echo "build: nodejs app"
    combined_language_script="$combined_language_script $nodejs_build_script"
  fi

  if [[ -z $combined_language_script ]]; then
    echo "No buildable language found"
    exit 1
  fi

  if [[ ! -z $deps ]]; then
    for depmang in $deps; do
      if [[ $depmang =~ ^--port= ]]; then
        port="${depmang/--port=/}"
        echo "expose: port $port"
      elif [[ $depmang =~ ^--npm= ]]; then
        echo "install: npm global dependencies"
        lang_deps="${depmang/--npm=/}"
        lang_deps="${lang_deps/,/ }"
        lang_dep_script="npm install -g $lang_deps;"
      elif [[ $depmang =~ ^--pip= ]]; then
        echo "install: additional pip dependencies"
        lang_deps="${depmang/--pip=/}"
        lang_deps="${lang_deps/,/ }"
        lang_dep_script="pip install $lang_deps;"
      elif [[ $depmang =~ ^--gem= ]]; then
        echo "install: additional gem dependencies"
        lang_deps="${depmang/--gem=/}"
        lang_deps="${lang_deps/,/ }"
        lang_dep_script="gem install $lang_deps;"
      fi
      combined_language_script="$combined_language_script $lang_dep_script"
    done
  fi

  build_script="
  $combined_language_script
  echo '-----> Change directory to app source';
  echo '';
  cd /src;
  bash;
  "

  # echo $build_script

  if [[ -z $port ]]; then
    docker run  -v "$XDG_CACHE_HOME/fjord":/fjord:ro \
                -v ${app_dir}:/src:rw \
                --rm \
                -it \
                --name "fjord_$(random_8_alphanumeric)" \
                -e "STACK=heroku-16" \
                heroku/heroku:16 \
                bash -c "$build_script"
  else
    docker run -p 127.0.0.1:$port:$port \
                -v "$XDG_CACHE_HOME/fjord":/fjord:ro \
                -v ${app_dir}:/src:rw \
                --rm \
                -it \
                --name "fjord_$(random_8_alphanumeric)" \
                -e "STACK=heroku-16" \
                heroku/heroku:16 \
                bash -c "$build_script"
  fi
}

get_script_dir () {
  SOURCE="${BASH_SOURCE[0]}"
  # While $SOURCE is a symlink, resolve it
  while [ -h "$SOURCE" ]; do
      DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
      SOURCE="$( readlink "$SOURCE" )"
      # If $SOURCE was a relative symlink (so no "/" as prefix, need to resolve it relative to the symlink base directory
      [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  echo "$DIR"
}

sync_buildpacks () {
  local fj_cache="$XDG_CACHE_HOME/fjord"
  cp -r "$(get_script_dir)/lib" $fj_cache

  local bp_cache="$fj_cache/buildpacks"
  mkdir -p $bp_cache

  languages="nodejs python ruby"

  for language in $languages; do
    echo "syncing $language buildpack"
    lang_buildpack_dir="$bp_cache/heroku-buildpack-$language"
    if [ -d "$lang_buildpack_dir" ]; then
      git --work-tree=$lang_buildpack_dir --git-dir=$lang_buildpack_dir/.git pull origin master
    else
      mkdir -p $lang_buildpack_dir
      git clone "https://github.com/heroku/heroku-buildpack-$language" $lang_buildpack_dir
    fi
    echo ''
  done
}

show_help () {
  echo "COMMANDS"
  echo "  $ fj sync"
  echo "  $ fj build --port=<port> --<dependency manager>=<dep>,<dep>"
}

cleanup () {
  if docker ps | grep "fjord_" > /dev/null; then
    docker rm -f $(docker ps | grep "fjord_" | awk "{print \$1}")
  fi
}

command_not_found () {
  echo "Command $1 not known"
  echo "Run $ fj help for COMMANDS"
}

router () {
  if [[ $1 = "help" ]]; then
    show_help
  elif [[ $1 = "sync" ]]; then
    sync_buildpacks
  elif [[ $1 = "build"  ]]; then
    start_runner $@
  elif [[ $1 = "cleanup"  ]]; then
    cleanup
  else
    command_not_found
  fi
}

router $@;
