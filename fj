#!/usr/bin/env bash

XDG_CACHE_HOME=${XDG_DATA_HOME:="$(cd && pwd)/Library/Caches"}

print_indent() {
  echo "  $*" || true
}

random_8_alphanumeric () {
  echo "$(hexdump -n 4 -v -e '/1 "%02X"' /dev/urandom)"
}

start_runner () {
  local cmd=$1
  local deps="${@:2}"
  local app_dir=`pwd`
  local languages
  local port
  local combined_buildpacks_script
  local combined_additional_deps_script


  local nodejs_build_script="
  NPM_CONFIG_PRODUCTION=false NODE_ENV=development /fjord/lib/compile nodejs;
  echo \"export NPM_CONFIG_PRODUCTION=false;export NODE_ENV=development;\" >> /root/.profile.d/nodejs.sh;
  source /root/.profile.d/nodejs.sh;
  "

  local python_build_script="
  /fjord/lib/compile python;
  source /root/.profile.d/python.sh;
  source /root/.profile.d/python.gunicorn.sh;
  "

  local ruby_build_script="
  /fjord/lib/compile ruby;
  source /root/.profile.d/ruby.sh;
  "

  include_python_buildpack () {
    print_indent "build: python buildpack"
    combined_buildpacks_script="$combined_buildpacks_script $python_build_script"
  }

  include_ruby_buildpack () {
    print_indent "build: ruby buildpack"
    combined_buildpacks_script="$combined_buildpacks_script $ruby_build_script"
  }

  include_nodejs_buildpack () {
    print_indent "build: nodejs buildpack"
    combined_buildpacks_script="$combined_buildpacks_script $nodejs_build_script"
  }

  determine_buildbacks () {
    if [ -f "./requirements.txt" ] || [ -f "./Pipfile" ] || [[ $deps =~ --pip ]]; then
      include_python_buildpack
    fi

    if [ -f "./Gemfile" ] || [[ $deps =~ --gem ]]; then
      include_ruby_buildpack
    fi

    if [ -f "package.json" ] || [[ $deps =~ --npm ]]; then
      include_nodejs_buildpack
    fi

    if [[ -z $combined_buildpacks_script ]]; then
      print_indent "No buildable language found"
      exit 1
    fi
  }

  determine_additional_dependencies () {
    if [[ ! -z $deps ]]; then
      for depmang in $deps; do
        if [[ $depmang =~ ^--port= ]]; then
          port="${depmang/--port=/}"
          print_indent "expose: port $port"
        elif [[ $depmang =~ ^--npm= ]]; then
          print_indent "install: npm global dependencies"
          lang_deps="${depmang/--npm=/}"
          lang_deps="${lang_deps/,/ }"
          lang_dep_script="echo '-----> Install npm global dependencies';npm install -g $lang_deps;"
        elif [[ $depmang =~ ^--pip= ]]; then
          print_indent "install: additional pip dependencies"
          lang_deps="${depmang/--pip=/}"
          lang_deps="${lang_deps/,/ }"
          lang_dep_script="echo '-----> Install additional pip dependencies';pip install $lang_deps;"
        elif [[ $depmang =~ ^--gem= ]]; then
          print_indent "install: additional gem dependencies"
          lang_deps="${depmang/--gem=/}"
          lang_deps="${lang_deps/,/ }"
          lang_dep_script="echo '-----> Install additional gem dependencies';gem install $lang_deps;"
        fi
        combined_additional_deps_script="$combined_additional_deps_script echo; $lang_dep_script echo;"
      done
    fi
  }

  echo_build_script() {
    echo "$combined_buildpacks_script
    $combined_additional_deps_script
    echo '-----> Change directory to app source';
    echo '';
    cd /src;
    bash;
    "
  }

  # echo_build_script

  echo "fjord's To-do list--"
  determine_buildbacks
  determine_additional_dependencies

  local port_flag=""
  if [[ ! -z $port ]]; then
    port_flag="-p 127.0.0.1:$port:$port"
  fi

  docker run  -v "$XDG_CACHE_HOME/fjord":/fjord:ro \
              $port_flag \
              -v ${app_dir}:/src:rw \
              --rm \
              -it \
              --name "fjord_$(random_8_alphanumeric)" \
              -e "STACK=heroku-16" \
              heroku/heroku:16 \
              bash -c "$(echo_build_script)"
}

get_script_dir () {
  SOURCE="${BASH_SOURCE[0]}"
  # While $SOURCE is a symlink, resolve it
  while [ -h "$SOURCE" ]; do
      DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
      SOURCE="$( readlink "$SOURCE" )"
      # If $SOURCE was a relative symlink (so no "/" as prefix, need to resolve it relative to the symlink base directory
      [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  echo "$DIR"
}

sync_buildpacks () {
  local fj_cache="$XDG_CACHE_HOME/fjord"
  cp -r "$(get_script_dir)/lib" $fj_cache

  local bp_cache="$fj_cache/buildpacks"
  mkdir -p $bp_cache

  languages="nodejs python ruby"

  for language in $languages; do
    echo "syncing $language buildpack"
    lang_buildpack_dir="$bp_cache/heroku-buildpack-$language"
    if [ -d "$lang_buildpack_dir" ]; then
      git --work-tree=$lang_buildpack_dir --git-dir=$lang_buildpack_dir/.git pull origin master
    else
      mkdir -p $lang_buildpack_dir
      git clone "https://github.com/heroku/heroku-buildpack-$language" $lang_buildpack_dir
    fi
    echo ''
  done
}

show_help () {
  echo "COMMANDS"
  echo "  $ fj sync"
  echo "  $ fj build --port=<port> --<dependency manager>=<dep>,<dep>"
  echo "  $ fj cleanup"
}

cleanup () {
  if docker ps | grep "fjord_" > /dev/null; then
    docker rm -f $(docker ps | grep "fjord_" | awk "{print \$1}")
  fi
}

command_not_found () {
  echo "Command $@ not known"
  echo "Run $ fj help for COMMANDS"
}

router () {
  if [[ $1 = "help" ]]; then
    show_help
  elif [[ $1 = "sync" ]]; then
    sync_buildpacks
  elif [[ $1 = "build"  ]]; then
    start_runner $@
  elif [[ $1 = "cleanup"  ]]; then
    cleanup
  else
    command_not_found $1
  fi
}

router $@;
