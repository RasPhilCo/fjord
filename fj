#!/usr/bin/env bash

XDG_CACHE_HOME=${XDG_DATA_HOME:="$(cd && pwd)/Library/Caches"}

get_script_dir () {
  SOURCE="${BASH_SOURCE[0]}"
  # While $SOURCE is a symlink, resolve it
  while [ -h "$SOURCE" ]; do
      DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
      SOURCE="$( readlink "$SOURCE" )"
      # If $SOURCE was a relative symlink (so no "/" as prefix, need to resolve it relative to the symlink base directory
      [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  echo "$DIR"
}

nodejs_build_script () {
  echo "NPM_CONFIG_PRODUCTION=false NODE_ENV=development /fjord/lib/compile nodejs;
  echo \"export NPM_CONFIG_PRODUCTION=false;export NODE_ENV=development;\" >> /root/.profile.d/nodejs.sh;
  source /root/.profile.d/nodejs.sh;
  "
}

python_build_script () {
  echo "/fjord/lib/compile python;
  source /root/.profile.d/python.sh;
  source /root/.profile.d/python.gunicorn.sh;
  "
}

ruby_build_script () {
  echo "/fjord/lib/compile ruby;
  source /root/.profile.d/ruby.sh;
  "
}

determine_languages () {
  if [ -f "./requirements.txt" ] || [ -f "./Pipfile" ]; then
    languages="$languages python"
  fi
  if [ -f "./Gemfile" ]; then
    languages="$languages ruby"
  fi
  if [ -f "package.json" ]; then
    languages="$languages nodejs"
  fi
}

start_runner () {
  local cmd=$1
  local deps="${@:2}"
  local app_dir=`pwd`
  local languages=""
  local port

  determine_languages;

  if [[ ! -z $languages ]]; then
    combined_language_script=""

    for language in $languages; do
      echo "build: $language app"
      combined_language_script="$combined_language_script $("$language"_build_script)"
    done

    if [[ ! -z $deps ]]; then
      for depmang in $deps; do
        if [[ $depmang =~ ^--port= ]]; then
          port="${depmang/--port=/}"
          echo "expose: port $port"
        elif [[ $depmang =~ ^--npm= ]]; then
          echo "install: npm global dependencies"
          lang_deps="${depmang/--npm=/}"
          lang_deps="${lang_deps/,/ }"
          lang_dep_script="npm install -g $lang_deps;"
          combined_language_script="$combined_language_script $lang_dep_script"
        elif [[ $depmang =~ ^--pip= ]]; then
          echo "install: additional pip dependencies"
          lang_deps="${depmang/--pip=/}"
          lang_deps="${lang_deps/,/ }"
          lang_dep_script="pip install $lang_deps;"
          combined_language_script="$combined_language_script $lang_dep_script"
        elif [[ $depmang =~ ^--gem= ]]; then
          echo "install: additional gem dependencies"
          lang_deps="${depmang/--gem=/}"
          lang_deps="${lang_deps/,/ }"
          lang_dep_script="gem install $lang_deps;"
          combined_language_script="$combined_language_script $lang_dep_script"
        fi
      done
    fi

    build_script="$combined_language_script
      echo '-----> Change directory to app source';
      echo '';
      cd /src;
      bash;"

    # echo $build_script

    docker run -p 127.0.0.1:$port:$port \
                -v "$XDG_CACHE_HOME/fjord":/fjord:ro \
                -v ${app_dir}:/src:rw \
                --rm \
                -it \
                -e "STACK=heroku-16" \
                heroku/heroku:16 \
                bash -c "$build_script"
  fi
  exit 1
}

sync_buildpacks () {
  local fj_cache="$XDG_CACHE_HOME/fjord"
  cp -r "$(get_script_dir)/lib" $fj_cache

  local bp_cache="$fj_cache/buildpacks"
  mkdir -p $bp_cache

  languages="nodejs python ruby"

  for language in $languages; do
    echo "syncing $language buildpack"
    lang_buildpack_dir="$bp_cache/heroku-buildpack-$language"
    if [ -d "$lang_buildpack_dir" ]; then
      git --work-tree=$lang_buildpack_dir --git-dir=$lang_buildpack_dir/.git pull origin master
    else
      mkdir -p $lang_buildpack_dir
      git clone "https://github.com/heroku/heroku-buildpack-$language" $lang_buildpack_dir
    fi
    echo ''
  done
}

router () {
  if [[ $1 = "help" ]]; then
    echo "COMMANDS"
    echo "  $ fj sync"
    echo "  $ fj build --port=<port> --<dependency manager>=<dep>,<dep>"
  elif [[ $1 = "sync" ]]; then
    sync_buildpacks
  elif [[ $1 = "build"  ]]; then
    start_runner $@
  else
    echo "Command $1 not known"
    echo "Run $ fj help for COMMANDS"
  fi
}

router $@;
